
ACTIVIDAD_IV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000cfa  00000d8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800164  00800164  00000df2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f05  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d17  00000000  00000000  00002ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d65  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  00004c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e28  00000000  00000000  00005324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__ctors_end>
   4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
   8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
   c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  10:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  14:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  18:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  1c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  20:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  24:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  2c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  30:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  34:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  38:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  3c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  40:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  44:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  48:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_18>
  4c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  50:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  54:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  58:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  5c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  60:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
  64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>

00000068 <INIT_SSD1306>:
  68:	12 00 ae 01 a8 3f 01 20 00 02 21 00 7f 02 22 00     .....?. ..!...".
  78:	07 00 40 01 d3 00 00 a1 00 c8 01 da 12 01 81 7f     ..@.............
  88:	00 a4 00 a6 01 d5 80 01 d9 c2 01 db 20 01 8d 14     ............ ...
  98:	00 af                                               ..

0000009a <FONTS>:
  9a:	00 00 00 00 00 81 81 18 81 81 00 07 00 07 00 14     ................
  aa:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  ba:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  ca:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  da:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  ea:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  fa:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 10a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 11a:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 12a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 13a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 14a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 15a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 16a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 17a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 18a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 19a:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 1aa:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1ba:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1ca:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1da:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1ea:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1fa:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 20a:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 21a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 22a:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 23a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 24a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 25a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 26a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000027a <__ctors_end>:
 27a:	11 24       	eor	r1, r1
 27c:	1f be       	out	0x3f, r1	; 63
 27e:	cf ef       	ldi	r28, 0xFF	; 255
 280:	d8 e0       	ldi	r29, 0x08	; 8
 282:	de bf       	out	0x3e, r29	; 62
 284:	cd bf       	out	0x3d, r28	; 61

00000286 <__do_copy_data>:
 286:	11 e0       	ldi	r17, 0x01	; 1
 288:	a0 e0       	ldi	r26, 0x00	; 0
 28a:	b1 e0       	ldi	r27, 0x01	; 1
 28c:	ea ef       	ldi	r30, 0xFA	; 250
 28e:	fc e0       	ldi	r31, 0x0C	; 12
 290:	02 c0       	rjmp	.+4      	; 0x296 <__do_copy_data+0x10>
 292:	05 90       	lpm	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	a4 36       	cpi	r26, 0x64	; 100
 298:	b1 07       	cpc	r27, r17
 29a:	d9 f7       	brne	.-10     	; 0x292 <__do_copy_data+0xc>

0000029c <__do_clear_bss>:
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	a4 e6       	ldi	r26, 0x64	; 100
 2a0:	b1 e0       	ldi	r27, 0x01	; 1
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
 2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
 2a6:	a9 36       	cpi	r26, 0x69	; 105
 2a8:	b2 07       	cpc	r27, r18
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
 2ac:	0e 94 20 02 	call	0x440	; 0x440 <main>
 2b0:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <_exit>

000002b4 <__bad_interrupt>:
 2b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b8 <read_adc0>:
												//fo=1,000,000/128 ~ 7Khz
}

uint16_t read_adc0(void)
{
	ADMUX = (ADMUX & 0xF8)|POT_PIN_ADC0;				//Selects ADC channel (0-5)
 2b8:	ec e7       	ldi	r30, 0x7C	; 124
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 7f       	andi	r24, 0xF8	; 248
 2c0:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);				//start conversion
 2c2:	ea e7       	ldi	r30, 0x7A	; 122
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF)));	//wait for conversion complete
 2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2d0:	84 ff       	sbrs	r24, 4
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <read_adc0+0x14>
	ADCSRA|=(1<<ADIF);				//clear flag for next conversion
 2d4:	ea e7       	ldi	r30, 0x7A	; 122
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 61       	ori	r24, 0x10	; 16
 2dc:	80 83       	st	Z, r24
	return(ADC);					//return sample value
 2de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 2e6:	08 95       	ret

000002e8 <init_adc_withINT>:


void init_adc_withINT(void)
{
	ADCSRA |=(1 << ADEN);	//enable adc
 2e8:	ea e7       	ldi	r30, 0x7A	; 122
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
	ADCSRA |=(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0); // activate prescaler fo=16,000,000Hz/128~125KHz
 2f2:	80 81       	ld	r24, Z
 2f4:	87 60       	ori	r24, 0x07	; 7
 2f6:	80 83       	st	Z, r24
	//ADMUX |=(0 << ADLAR);	//left justified (ADCH bit9-2, ADCL bit1-0)
	//ADMUX |=(1 << MUX1);	//Selects ADC channel (0-5)
	ADMUX |=(1 << REFS0);	//Selects Vref(pag 257)//AVcc= 5v & Aref= with capacitor to GND
 2f8:	ac e7       	ldi	r26, 0x7C	; 124
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	8c 91       	ld	r24, X
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	8c 93       	st	X, r24
	//ADCSRA |= 1 << ADIE;	//enable ADC interrupts
	ADCSRA |= 1 << ADSC;	//start conversion
 302:	80 81       	ld	r24, Z
 304:	80 64       	ori	r24, 0x40	; 64
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <oled_adc_valor>:
}

void oled_adc_valor(void){
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	c1 54       	subi	r28, 0x41	; 65
 314:	d1 09       	sbc	r29, r1
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
	SSD1306_SetPosition (30,10);//col,row
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	8e e1       	ldi	r24, 0x1E	; 30
 324:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
	SSD1306_DrawString ("Voltaje", NORMAL);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
	char buffer[65]; 
	uint16_t adc_valor=read_adc0();
 332:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <read_adc0>
	float voltaje=(adc_valor*5.0)/1023.0;
 336:	bc 01       	movw	r22, r24
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatunsisf>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 ea       	ldi	r20, 0xA0	; 160
 346:	50 e4       	ldi	r21, 0x40	; 64
 348:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__mulsf3>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 ec       	ldi	r19, 0xC0	; 192
 350:	4f e7       	ldi	r20, 0x7F	; 127
 352:	54 e4       	ldi	r21, 0x44	; 68
 354:	0e 94 a3 04 	call	0x946	; 0x946 <__divsf3>
	itoa(voltaje,buffer,10);
 358:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fixsfsi>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 360:	4a e0       	ldi	r20, 0x0A	; 10
 362:	be 01       	movw	r22, r28
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	0e 94 46 06 	call	0xc8c	; 0xc8c <__itoa_ncheck>
	SSD1306_SetPosition(47,11);
 36c:	6b e0       	ldi	r22, 0x0B	; 11
 36e:	8f e2       	ldi	r24, 0x2F	; 47
 370:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
	SSD1306_DrawString(buffer,NORMAL);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	ce 01       	movw	r24, r28
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
}
 37e:	cf 5b       	subi	r28, 0xBF	; 191
 380:	df 4f       	sbci	r29, 0xFF	; 255
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <TWI_Init>:
		// return status
		return TWI_STATUS;
	}
	// success
	return SUCCESS;
}
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 398:	e9 eb       	ldi	r30, 0xB9	; 185
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	90 81       	ld	r25, Z
 3a0:	82 70       	andi	r24, 0x02	; 2
 3a2:	81 60       	ori	r24, 0x01	; 1
 3a4:	89 2b       	or	r24, r25
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <TWI_MT_Start>:
 3aa:	e9 eb       	ldi	r30, 0xB9	; 185
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	87 75       	andi	r24, 0x57	; 87
 3b2:	80 83       	st	Z, r24
 3b4:	84 ea       	ldi	r24, 0xA4	; 164
 3b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3be:	88 23       	and	r24, r24
 3c0:	e4 f7       	brge	.-8      	; 0x3ba <TWI_MT_Start+0x10>
 3c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3c6:	88 7f       	andi	r24, 0xF8	; 248
 3c8:	88 30       	cpi	r24, 0x08	; 8
 3ca:	49 f0       	breq	.+18     	; 0x3de <TWI_MT_Start+0x34>
 3cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3d0:	88 7f       	andi	r24, 0xF8	; 248
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <TWI_MT_Start+0x38>
 3d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3da:	88 7f       	andi	r24, 0xF8	; 248
 3dc:	08 95       	ret
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	08 95       	ret

000003e6 <TWI_MT_Send_SLAW>:
 3e6:	88 0f       	add	r24, r24
 3e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3ec:	84 e8       	ldi	r24, 0x84	; 132
 3ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3f6:	88 23       	and	r24, r24
 3f8:	e4 f7       	brge	.-8      	; 0x3f2 <TWI_MT_Send_SLAW+0xc>
 3fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3fe:	88 7f       	andi	r24, 0xF8	; 248
 400:	88 31       	cpi	r24, 0x18	; 24
 402:	21 f0       	breq	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 408:	88 7f       	andi	r24, 0xF8	; 248
 40a:	08 95       	ret
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret

00000410 <TWI_MT_Send_Data>:
 410:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 414:	84 e8       	ldi	r24, 0x84	; 132
 416:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 41a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 41e:	88 23       	and	r24, r24
 420:	e4 f7       	brge	.-8      	; 0x41a <TWI_MT_Send_Data+0xa>
 422:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 426:	88 7f       	andi	r24, 0xF8	; 248
 428:	88 32       	cpi	r24, 0x28	; 40
 42a:	21 f0       	breq	.+8      	; 0x434 <TWI_MT_Send_Data+0x24>
 42c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 430:	88 7f       	andi	r24, 0xF8	; 248
 432:	08 95       	ret
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret

00000438 <TWI_Stop>:
void TWI_Stop (void)
{
	// End TWI
	// -------------------------------------------------------------------------------------
	// send stop sequence
	TWI_STOP ();
 438:	84 e9       	ldi	r24, 0x94	; 148
 43a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 43e:	08 95       	ret

00000440 <main>:
#include <avr/interrupt.h>
#include "usart.h"
int main(void)
{

  init_ssd1306();
 440:	0e 94 b1 03 	call	0x762	; 0x762 <init_ssd1306>
  SSD1306_ClearScreen ();
 444:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
  int count = 0;
  for (count = 0; count <= 110; count++)
 448:	c0 e0       	ldi	r28, 0x00	; 0
 44a:	d0 e0       	ldi	r29, 0x00	; 0
 44c:	1e c0       	rjmp	.+60     	; 0x48a <main+0x4a>
  {
	  SSD1306_SetPosition(28,0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8c e1       	ldi	r24, 0x1C	; 28
 452:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
	  SSD1306_DrawString ("ACTIVIDAD IV", NORMAL);
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	88 e0       	ldi	r24, 0x08	; 8
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
	  SSD1306_SetPosition (count, 15);
 460:	6f e0       	ldi	r22, 0x0F	; 15
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
	  SSD1306_DrawString ("-", NORMAL);
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	85 e1       	ldi	r24, 0x15	; 21
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	2f ef       	ldi	r18, 0xFF	; 255
 474:	89 ef       	ldi	r24, 0xF9	; 249
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	90 40       	sbci	r25, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <main+0x38>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x42>
 482:	00 00       	nop
	  _delay_ms(20);
	  SSD1306_ClearScreen();
 484:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
{

  init_ssd1306();
  SSD1306_ClearScreen ();
  int count = 0;
  for (count = 0; count <= 110; count++)
 488:	21 96       	adiw	r28, 0x01	; 1
 48a:	cf 36       	cpi	r28, 0x6F	; 111
 48c:	d1 05       	cpc	r29, r1
 48e:	fc f2       	brlt	.-66     	; 0x44e <main+0xe>
	  SSD1306_SetPosition (count, 15);
	  SSD1306_DrawString ("-", NORMAL);
	  _delay_ms(20);
	  SSD1306_ClearScreen();
  }  
  init_adc_withINT();
 490:	0e 94 74 01 	call	0x2e8	; 0x2e8 <init_adc_withINT>
  init_usart(207);
 494:	8f ec       	ldi	r24, 0xCF	; 207
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 ed 03 	call	0x7da	; 0x7da <init_usart>
DDRB|= (1 << DDB5) | (1 << DDB4) | (1 << DDB3);
 49c:	84 b1       	in	r24, 0x04	; 4
 49e:	88 63       	ori	r24, 0x38	; 56
 4a0:	84 b9       	out	0x04, r24	; 4
PORTB|= (1<< PORTB5)| (1<<PORTB4) | (1 << PORTB3);
 4a2:	85 b1       	in	r24, 0x05	; 5
 4a4:	88 63       	ori	r24, 0x38	; 56
 4a6:	85 b9       	out	0x05, r24	; 5

  while(1){
		  
		   sei();
 4a8:	78 94       	sei
		   oled_adc_valor();
 4aa:	0e 94 85 01 	call	0x30a	; 0x30a <oled_adc_valor>
 4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <main+0x68>

000004b0 <SSD1306_Send_StartAndSLAW>:
  }
  // TWI STOP
  TWI_Stop ();

  return SSD1306_SUCCESS;                                         // success
}
 4b0:	cf 93       	push	r28
 4b2:	c8 2f       	mov	r28, r24
 4b4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI_MT_Start>
 4b8:	81 11       	cpse	r24, r1
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <SSD1306_Send_StartAndSLAW+0x12>
 4bc:	8c 2f       	mov	r24, r28
 4be:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <TWI_MT_Send_SLAW>
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <SSD1306_Send_Command>:
 4c6:	cf 93       	push	r28
 4c8:	c8 2f       	mov	r28, r24
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
 4d0:	81 11       	cpse	r24, r1
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <SSD1306_Send_Command+0x14>
 4d4:	8c 2f       	mov	r24, r28
 4d6:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <SSD1306_ClearScreen>:

uint8_t SSD1306_ClearScreen (void)
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint16_t i = 0;                                                 // counter

  // TWI START & SLAW
  status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 4e2:	8c e3       	ldi	r24, 0x3C	; 60
 4e4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {                                // check status
 4e8:	81 11       	cpse	r24, r1
 4ea:	15 c0       	rjmp	.+42     	; 0x516 <SSD1306_ClearScreen+0x38>
    return status;                                                // error
  }
  // TWI control byte data stream
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);                // send data 0x40
 4ec:	80 e4       	ldi	r24, 0x40	; 64
 4ee:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {                                // check status
 4f2:	81 11       	cpse	r24, r1
 4f4:	10 c0       	rjmp	.+32     	; 0x516 <SSD1306_ClearScreen+0x38>
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <SSD1306_ClearScreen+0x2a>
    return status;                                                // error
  }
  //  send clear byte to memory lcd
  while (i < CACHE_SIZE_MEM) {
    status = TWI_MT_Send_Data (CLEAR_COLOR);                      // send data 0x00
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 502:	81 11       	cpse	r24, r1
 504:	08 c0       	rjmp	.+16     	; 0x516 <SSD1306_ClearScreen+0x38>
      return status;                                              // error
    }
    i++;                                                          // update counter
 506:	21 96       	adiw	r28, 0x01	; 1
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);                // send data 0x40
  if (SSD1306_SUCCESS != status) {                                // check status
    return status;                                                // error
  }
  //  send clear byte to memory lcd
  while (i < CACHE_SIZE_MEM) {
 508:	c1 15       	cp	r28, r1
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	d8 07       	cpc	r29, r24
 50e:	b0 f3       	brcs	.-20     	; 0x4fc <SSD1306_ClearScreen+0x1e>
      return status;                                              // error
    }
    i++;                                                          // update counter
  }
  // TWI STOP
  TWI_Stop ();
 510:	0e 94 1c 02 	call	0x438	; 0x438 <TWI_Stop>

  return SSD1306_SUCCESS;                                         // success
 514:	80 e0       	ldi	r24, 0x00	; 0
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <SSD1306_SetWindow>:

uint8_t SSD1306_SetWindow (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	c8 2f       	mov	r28, r24
 526:	d6 2f       	mov	r29, r22
 528:	14 2f       	mov	r17, r20
 52a:	02 2f       	mov	r16, r18
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF

  // TWI START & SLAW
  status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 52c:	8c e3       	ldi	r24, 0x3C	; 60
 52e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {                                // check status
 532:	81 11       	cpse	r24, r1
 534:	2d c0       	rjmp	.+90     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  // COLUMN
  status = SSD1306_Send_Command (SSD1306_SET_COLUMN_ADDR);        // 0x21
 536:	81 e2       	ldi	r24, 0x21	; 33
 538:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 53c:	81 11       	cpse	r24, r1
 53e:	28 c0       	rjmp	.+80     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (x1);                             // start COLUMN
 540:	8c 2f       	mov	r24, r28
 542:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 546:	81 11       	cpse	r24, r1
 548:	23 c0       	rjmp	.+70     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (x2);                             // end COLUMN
 54a:	8d 2f       	mov	r24, r29
 54c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 550:	81 11       	cpse	r24, r1
 552:	1e c0       	rjmp	.+60     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  _indexCol = x1;                                                 // update column index
 554:	8c 2f       	mov	r24, r28
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <_indexCol+0x1>
 55c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_indexCol>
  // PAGE
  status = SSD1306_Send_Command (SSD1306_SET_PAGE_ADDR);          // 0x22
 560:	82 e2       	ldi	r24, 0x22	; 34
 562:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 566:	81 11       	cpse	r24, r1
 568:	13 c0       	rjmp	.+38     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (y1);                             // start PAGE
 56a:	81 2f       	mov	r24, r17
 56c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 570:	81 11       	cpse	r24, r1
 572:	0e c0       	rjmp	.+28     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  status = SSD1306_Send_Command (y2);                             // end PAGE
 574:	80 2f       	mov	r24, r16
 576:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {                                // check status
 57a:	81 11       	cpse	r24, r1
 57c:	09 c0       	rjmp	.+18     	; 0x590 <SSD1306_SetWindow+0x74>
    return status;                                                // error
  }
  _indexPage = y1;                                                // update column index
 57e:	81 2f       	mov	r24, r17
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <__data_end+0x1>
 586:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <__data_end>

  // TWI STOP
  TWI_Stop ();
 58a:	0e 94 1c 02 	call	0x438	; 0x438 <TWI_Stop>

  return SSD1306_SUCCESS;                                         // success
 58e:	80 e0       	ldi	r24, 0x00	; 0
}
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <SSD1306_SetPosition>:

uint8_t SSD1306_SetPosition (uint8_t x, uint8_t y)
{
 59a:	46 2f       	mov	r20, r22
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t x_end = END_COLUMN_ADDR;
  uint8_t y_end = END_PAGE_ADDR;
 
  status = SSD1306_SetWindow (x, x_end, y, y_end);                // end COLUMN
 59c:	27 e0       	ldi	r18, 0x07	; 7
 59e:	6f e7       	ldi	r22, 0x7F	; 127
 5a0:	0e 94 8e 02 	call	0x51c	; 0x51c <SSD1306_SetWindow>
  if (SSD1306_SUCCESS != status) {                                // check status
    return status;                                                // error
  }

  return SSD1306_SUCCESS;                                         // success
}
 5a4:	08 95       	ret

000005a6 <SSD1306_UpdatePosition>:

uint8_t SSD1306_UpdatePosition (uint8_t x, uint8_t p)
{
 5a6:	cf 93       	push	r28
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF

  // check position
  // -------------------------------------------------------------------------------------
  if (x > END_COLUMN_ADDR) {
 5a8:	88 23       	and	r24, r24
 5aa:	d4 f4       	brge	.+52     	; 0x5e0 <SSD1306_UpdatePosition+0x3a>
 5ac:	c6 2f       	mov	r28, r22
    // last page not reached
    // -----------------------------------------------------------------------------------
    if (p < END_PAGE_ADDR) {
 5ae:	67 30       	cpi	r22, 0x07	; 7
 5b0:	98 f4       	brcc	.+38     	; 0x5d8 <SSD1306_UpdatePosition+0x32>
      _indexCol = 0;                                              // update column
 5b2:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <_indexCol+0x1>
 5b6:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_indexCol>
      _indexPage = _indexPage + 1;                                // update page
 5ba:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <__data_end>
 5be:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <__data_end+0x1>
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <__data_end+0x1>
 5ca:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <__data_end>
      status = SSD1306_SetPosition (_indexCol, _indexPage);       // update position
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
      if (SSD1306_SUCCESS != status) {                            // check status
 5d4:	81 11       	cpse	r24, r1
 5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <SSD1306_UpdatePosition+0x40>
        return status;                                            // error
      }
    }
    // last page reached
    // -----------------------------------------------------------------------------------
    if (p >= END_PAGE_ADDR) {
 5d8:	c7 30       	cpi	r28, 0x07	; 7
 5da:	20 f0       	brcs	.+8      	; 0x5e4 <SSD1306_UpdatePosition+0x3e>
      return SSD1306_ERROR;                                       // return out of range
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	03 c0       	rjmp	.+6      	; 0x5e6 <SSD1306_UpdatePosition+0x40>
    }
  }

  return SSD1306_SUCCESS;                                         // success
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <SSD1306_UpdatePosition+0x40>
 5e4:	80 e0       	ldi	r24, 0x00	; 0
}
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <SSD1306_DrawChar>:
 * @param   enum font 
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawChar (char ch, enum E_Font font)
{
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	c8 2f       	mov	r28, r24
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;

  //  NORMAL FONT
  if ((font & 0x0f) == NORMAL) { 
 5f4:	86 2f       	mov	r24, r22
 5f6:	8f 70       	andi	r24, 0x0F	; 15
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	09 f0       	breq	.+2      	; 0x600 <SSD1306_DrawChar+0x16>
 5fe:	3d c0       	rjmp	.+122    	; 0x67a <SSD1306_DrawChar+0x90>
    if (font & 0xf0) {                                            // underline?
 600:	60 7f       	andi	r22, 0xF0	; 240
 602:	11 f4       	brne	.+4      	; 0x608 <SSD1306_DrawChar+0x1e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 604:	d0 e0       	ldi	r29, 0x00	; 0
 606:	01 c0       	rjmp	.+2      	; 0x60a <SSD1306_DrawChar+0x20>

  //  NORMAL FONT
  if ((font & 0x0f) == NORMAL) { 
    if (font & 0xf0) {                                            // underline?
      mask = 0x80;                                                // set underline mask
 608:	d0 e8       	ldi	r29, 0x80	; 128
    }
    next_x = _indexCol + CHARS_COLS_LENGTH;                       // next column
 60a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_indexCol>
    next_p = _indexPage;                                          // next page
 60e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <__data_end>
    // UPDATE / CHECK TEXT POSITION
    status = SSD1306_UpdatePosition (next_x, next_p);
 612:	8b 5f       	subi	r24, 0xFB	; 251
 614:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SSD1306_UpdatePosition>
    if (SSD1306_SUCCESS != status) {                              // check status
 618:	81 11       	cpse	r24, r1
 61a:	87 c0       	rjmp	.+270    	; 0x72a <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI START & SLAW
    status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);            // start & SLAW
 61c:	8c e3       	ldi	r24, 0x3C	; 60
 61e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SSD1306_Send_StartAndSLAW>
    if (SSD1306_SUCCESS != status) {                              // check status
 622:	81 11       	cpse	r24, r1
 624:	82 c0       	rjmp	.+260    	; 0x72a <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI control byte data stream
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
 626:	80 e4       	ldi	r24, 0x40	; 64
 628:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 62c:	81 11       	cpse	r24, r1
 62e:	7d c0       	rjmp	.+250    	; 0x72a <SSD1306_DrawChar+0x140>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	20 c0       	rjmp	.+64     	; 0x674 <SSD1306_DrawChar+0x8a>
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 634:	8c 2f       	mov	r24, r28
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	80 97       	sbiw	r24, 0x20	; 32
 63a:	11 e0       	ldi	r17, 0x01	; 1
 63c:	12 0f       	add	r17, r18
 63e:	fc 01       	movw	r30, r24
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	e8 0f       	add	r30, r24
 64a:	f9 1f       	adc	r31, r25
 64c:	e2 0f       	add	r30, r18
 64e:	f1 1d       	adc	r31, r1
 650:	e6 56       	subi	r30, 0x66	; 102
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	84 91       	lpm	r24, Z
      status = TWI_MT_Send_Data (byte | mask);                    // send data col
 656:	8d 2b       	or	r24, r29
 658:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 65c:	81 11       	cpse	r24, r1
 65e:	65 c0       	rjmp	.+202    	; 0x72a <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      _indexCol++;                                                // update global col
 660:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_indexCol>
 664:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_indexCol+0x1>
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <_indexCol+0x1>
 66e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_indexCol>
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 672:	21 2f       	mov	r18, r17
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
 674:	25 30       	cpi	r18, 0x05	; 5
 676:	f0 f2       	brcs	.-68     	; 0x634 <SSD1306_DrawChar+0x4a>
 678:	47 c0       	rjmp	.+142    	; 0x708 <SSD1306_DrawChar+0x11e>
        return status;                                            // error
      }
      _indexCol++;                                                // update global col
    }
  //  BOLD FONT
  } else if ((font & 0x0f) == BOLD) {
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	09 f0       	breq	.+2      	; 0x680 <SSD1306_DrawChar+0x96>
 67e:	43 c0       	rjmp	.+134    	; 0x706 <SSD1306_DrawChar+0x11c>
    if (font & 0xf0) {                                            // underline?
 680:	60 7f       	andi	r22, 0xF0	; 240
 682:	11 f4       	brne	.+4      	; 0x688 <SSD1306_DrawChar+0x9e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 684:	d0 e0       	ldi	r29, 0x00	; 0
 686:	01 c0       	rjmp	.+2      	; 0x68a <SSD1306_DrawChar+0xa0>
      _indexCol++;                                                // update global col
    }
  //  BOLD FONT
  } else if ((font & 0x0f) == BOLD) {
    if (font & 0xf0) {                                            // underline?
      mask = 0x80;                                                // set underline mask
 688:	d0 e8       	ldi	r29, 0x80	; 128
    }
    next_x = _indexCol + (CHARS_COLS_LENGTH << 1);                // next column
 68a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_indexCol>
    next_p = _indexPage;                                          // next page
 68e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <__data_end>
    // UPDATE / CHECK TEXT POSITION
    status = SSD1306_UpdatePosition (next_x, next_p);
 692:	86 5f       	subi	r24, 0xF6	; 246
 694:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SSD1306_UpdatePosition>
    if (SSD1306_SUCCESS != status) {                              // check status
 698:	81 11       	cpse	r24, r1
 69a:	47 c0       	rjmp	.+142    	; 0x72a <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI START & SLAW
    status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);            // start & SLAW
 69c:	8c e3       	ldi	r24, 0x3C	; 60
 69e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SSD1306_Send_StartAndSLAW>
    if (SSD1306_SUCCESS != status) {                              // check status
 6a2:	81 11       	cpse	r24, r1
 6a4:	42 c0       	rjmp	.+132    	; 0x72a <SSD1306_DrawChar+0x140>
      return status;                                              // error
    }
    // TWI control byte data stream
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
 6a6:	80 e4       	ldi	r24, 0x40	; 64
 6a8:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {                              // check status
 6ac:	81 11       	cpse	r24, r1
 6ae:	3d c0       	rjmp	.+122    	; 0x72a <SSD1306_DrawChar+0x140>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	26 c0       	rjmp	.+76     	; 0x700 <SSD1306_DrawChar+0x116>
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 6b4:	8c 2f       	mov	r24, r28
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	80 97       	sbiw	r24, 0x20	; 32
 6ba:	01 e0       	ldi	r16, 0x01	; 1
 6bc:	02 0f       	add	r16, r18
 6be:	fc 01       	movw	r30, r24
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e8 0f       	add	r30, r24
 6ca:	f9 1f       	adc	r31, r25
 6cc:	e2 0f       	add	r30, r18
 6ce:	f1 1d       	adc	r31, r1
 6d0:	e6 56       	subi	r30, 0x66	; 102
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	14 91       	lpm	r17, Z
      status = TWI_MT_Send_Data (byte | mask);                    // send data 1st col
 6d6:	1d 2b       	or	r17, r29
 6d8:	81 2f       	mov	r24, r17
 6da:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 6de:	81 11       	cpse	r24, r1
 6e0:	24 c0       	rjmp	.+72     	; 0x72a <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      status = TWI_MT_Send_Data (byte | mask);                    // send data 2nd col
 6e2:	81 2f       	mov	r24, r17
 6e4:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
      if (SSD1306_SUCCESS != status) {                            // check status
 6e8:	81 11       	cpse	r24, r1
 6ea:	1f c0       	rjmp	.+62     	; 0x72a <SSD1306_DrawChar+0x140>
        return status;                                            // error
      }
      _indexCol = _indexCol + 2;                                  // update global col
 6ec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_indexCol>
 6f0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_indexCol+0x1>
 6f4:	02 96       	adiw	r24, 0x02	; 2
 6f6:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <_indexCol+0x1>
 6fa:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_indexCol>
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
      byte = pgm_read_byte (&FONTS[ch-32][i++]);
 6fe:	20 2f       	mov	r18, r16
    status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);              // send data 0x40
    if (SSD1306_SUCCESS != status) {                              // check status
      return status;                                              // error
    }

    while (i < CHARS_COLS_LENGTH) {
 700:	25 30       	cpi	r18, 0x05	; 5
 702:	c0 f2       	brcs	.-80     	; 0x6b4 <SSD1306_DrawChar+0xca>
 704:	01 c0       	rjmp	.+2      	; 0x708 <SSD1306_DrawChar+0x11e>
  uint8_t byte;
  uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
  uint8_t i = 0;                                                  // counter
  uint8_t next_x;
  uint8_t next_p;
  uint8_t mask = 0x00;
 706:	d0 e0       	ldi	r29, 0x00	; 0
      }
      _indexCol = _indexCol + 2;                                  // update global col
    }
  } 
  //  send empty column to memory lcd
  status = TWI_MT_Send_Data (mask);                               // ONE empty column
 708:	8d 2f       	mov	r24, r29
 70a:	0e 94 08 02 	call	0x410	; 0x410 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {                                // check status
 70e:	81 11       	cpse	r24, r1
 710:	0c c0       	rjmp	.+24     	; 0x72a <SSD1306_DrawChar+0x140>
    return status;                                                // error
  }
  _indexCol++;                                                    // update global col
 712:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_indexCol>
 716:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_indexCol+0x1>
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <_indexCol+0x1>
 720:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_indexCol>

  // TWI STOP
  TWI_Stop ();
 724:	0e 94 1c 02 	call	0x438	; 0x438 <TWI_Stop>
  return SSD1306_SUCCESS;                                         // success
 728:	80 e0       	ldi	r24, 0x00	; 0
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	08 95       	ret

00000734 <SSD1306_DrawString>:

uint8_t SSD1306_DrawString (char *str, enum E_Font font)
{
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	8c 01       	movw	r16, r24
 73e:	d6 2f       	mov	r29, r22
  uint8_t i = 0;                                                  // char counter
 740:	c0 e0       	ldi	r28, 0x00	; 0

  // send characters of string
  while (str[i] != '\0') {
 742:	04 c0       	rjmp	.+8      	; 0x74c <SSD1306_DrawString+0x18>
    SSD1306_DrawChar (str[i++], font);                            // send char
 744:	cf 5f       	subi	r28, 0xFF	; 255
 746:	6d 2f       	mov	r22, r29
 748:	0e 94 f5 02 	call	0x5ea	; 0x5ea <SSD1306_DrawChar>
uint8_t SSD1306_DrawString (char *str, enum E_Font font)
{
  uint8_t i = 0;                                                  // char counter

  // send characters of string
  while (str[i] != '\0') {
 74c:	f8 01       	movw	r30, r16
 74e:	ec 0f       	add	r30, r28
 750:	f1 1d       	adc	r31, r1
 752:	80 81       	ld	r24, Z
 754:	81 11       	cpse	r24, r1
 756:	f6 cf       	rjmp	.-20     	; 0x744 <SSD1306_DrawString+0x10>
    SSD1306_DrawChar (str[i++], font);                            // send char
  }
  return SSD1306_SUCCESS;                                         // success
}
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	08 95       	ret

00000762 <init_ssd1306>:
//initialize controller
uint8_t init_ssd1306(void)
{
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
	const uint8_t *commands = INIT_SSD1306;                         // variables
	uint8_t no_of_commands = pgm_read_byte (commands++);            // number of commands
 770:	e8 e6       	ldi	r30, 0x68	; 104
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	d4 90       	lpm	r13, Z
	uint8_t no_of_arguments;                                        // number od arguments
	uint8_t command;                                                // command
	uint8_t status = INIT_STATUS;                                   // TWI init status 0xFF
	// TWI INIT
	TWI_Init ();
 776:	0e 94 c9 01 	call	0x392	; 0x392 <TWI_Init>
	// TWI START & SLAW
	status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
 77a:	8c e3       	ldi	r24, 0x3C	; 60
 77c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <SSD1306_Send_StartAndSLAW>
	if (SSD1306_SUCCESS != status) {                                // check status
 780:	81 11       	cpse	r24, r1
 782:	23 c0       	rjmp	.+70     	; 0x7ca <init_ssd1306+0x68>
 784:	c9 e6       	ldi	r28, 0x69	; 105
 786:	d0 e0       	ldi	r29, 0x00	; 0
 788:	1b c0       	rjmp	.+54     	; 0x7c0 <init_ssd1306+0x5e>
		return status;                                                // error
	}
	// SEND COMMAND & ARGUMENTS
	while (no_of_commands) {                                        // commands loop
		no_of_arguments = pgm_read_byte (commands++);                 // number of arguments
 78a:	fe 01       	movw	r30, r28
 78c:	14 91       	lpm	r17, Z
		command = pgm_read_byte (commands++);                         // command
 78e:	31 96       	adiw	r30, 0x01	; 1
 790:	84 91       	lpm	r24, Z
 792:	22 96       	adiw	r28, 0x02	; 2
		// Send commands
		status = SSD1306_Send_Command (command);                      // send command
 794:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
		if (SSD1306_SUCCESS != status) {                              // check status
 798:	88 23       	and	r24, r24
 79a:	69 f0       	breq	.+26     	; 0x7b6 <init_ssd1306+0x54>
 79c:	16 c0       	rjmp	.+44     	; 0x7ca <init_ssd1306+0x68>
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
 79e:	7e 01       	movw	r14, r28
 7a0:	ff ef       	ldi	r31, 0xFF	; 255
 7a2:	ef 1a       	sub	r14, r31
 7a4:	ff 0a       	sbc	r15, r31
 7a6:	fe 01       	movw	r30, r28
 7a8:	84 91       	lpm	r24, Z
 7aa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SSD1306_Send_Command>
		status = SSD1306_Send_Command (command);                      // send command
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
 7ae:	10 2f       	mov	r17, r16
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
			if (SSD1306_SUCCESS != status) {                            // check status
 7b0:	81 11       	cpse	r24, r1
 7b2:	0b c0       	rjmp	.+22     	; 0x7ca <init_ssd1306+0x68>
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
 7b4:	e7 01       	movw	r28, r14
		status = SSD1306_Send_Command (command);                      // send command
		if (SSD1306_SUCCESS != status) {                              // check status
			return status;                                              // error
		}
		// Send arguments
		while (no_of_arguments--) {
 7b6:	0f ef       	ldi	r16, 0xFF	; 255
 7b8:	01 0f       	add	r16, r17
 7ba:	11 11       	cpse	r17, r1
 7bc:	f0 cf       	rjmp	.-32     	; 0x79e <init_ssd1306+0x3c>
			status = SSD1306_Send_Command (pgm_read_byte(commands++));  // send argument
			if (SSD1306_SUCCESS != status) {                            // check status
				return status;                                            // error
			}
		}
		no_of_commands--;                                             // next command
 7be:	da 94       	dec	r13
	status = SSD1306_Send_StartAndSLAW (SSD1306_ADDR);              // start & SLAW
	if (SSD1306_SUCCESS != status) {                                // check status
		return status;                                                // error
	}
	// SEND COMMAND & ARGUMENTS
	while (no_of_commands) {                                        // commands loop
 7c0:	d1 10       	cpse	r13, r1
 7c2:	e3 cf       	rjmp	.-58     	; 0x78a <init_ssd1306+0x28>
			}
		}
		no_of_commands--;                                             // next command
	}
	// TWI STOP
	TWI_Stop ();
 7c4:	0e 94 1c 02 	call	0x438	; 0x438 <TWI_Stop>
	return SSD1306_SUCCESS;                                         // success
 7c8:	80 e0       	ldi	r24, 0x00	; 0
}
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	df 90       	pop	r13
 7d8:	08 95       	ret

000007da <init_usart>:
  }
}

void init_usart(unsigned int baudrate)
{
	UCSR0C &= (~(1<<UMSEL00) & ~(1<<UMSEL01)); // bit UMSEL = 0 asyncronous mode	
 7da:	e2 ec       	ldi	r30, 0xC2	; 194
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	20 81       	ld	r18, Z
 7e0:	2f 73       	andi	r18, 0x3F	; 63
 7e2:	20 83       	st	Z, r18
	UCSR0A = (1<<U2X0); // bit U2X = 1 double speed
 7e4:	22 e0       	ldi	r18, 0x02	; 2
 7e6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Baudrate:fosc=16Mhz,U2Xn=1,BaudRate=9600, then UBRR= 207 (DS pag.199)
	UBRR0H = (unsigned char) (baudrate>>8); // write(MSB)
 7ea:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) (baudrate);	//write(LSB)
 7ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = ((1<<UCSZ00) | (1<<UCSZ01)); //8 bits data lenght
 7f2:	86 e0       	ldi	r24, 0x06	; 6
 7f4:	80 83       	st	Z, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);	//enable transmitter & receiver
 7f6:	e1 ec       	ldi	r30, 0xC1	; 193
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	88 e1       	ldi	r24, 0x18	; 24
 7fc:	80 83       	st	Z, r24
	//UCSRC = (1<<USBS);	//2 stop bits
	UCSR0B |= (1<<RXCIE0);	//enable reception complete (RXCIE0=1) interrupts
 7fe:	80 81       	ld	r24, Z
 800:	80 68       	ori	r24, 0x80	; 128
 802:	80 83       	st	Z, r24
 804:	08 95       	ret

00000806 <process_command>:
}

void process_command(char command) {
	switch (command) {
 806:	82 35       	cpi	r24, 0x52	; 82
 808:	f1 f0       	breq	.+60     	; 0x846 <process_command+0x40>
 80a:	30 f4       	brcc	.+12     	; 0x818 <process_command+0x12>
 80c:	82 34       	cpi	r24, 0x42	; 66
 80e:	09 f4       	brne	.+2      	; 0x812 <process_command+0xc>
 810:	56 c0       	rjmp	.+172    	; 0x8be <process_command+0xb8>
 812:	87 34       	cpi	r24, 0x47	; 71
 814:	b1 f1       	breq	.+108    	; 0x882 <process_command+0x7c>
 816:	08 95       	ret
 818:	87 36       	cpi	r24, 0x67	; 103
 81a:	21 f1       	breq	.+72     	; 0x864 <process_command+0x5e>
 81c:	82 37       	cpi	r24, 0x72	; 114
 81e:	21 f0       	breq	.+8      	; 0x828 <process_command+0x22>
 820:	82 36       	cpi	r24, 0x62	; 98
 822:	09 f0       	breq	.+2      	; 0x826 <process_command+0x20>
 824:	5a c0       	rjmp	.+180    	; 0x8da <process_command+0xd4>
 826:	3c c0       	rjmp	.+120    	; 0x8a0 <process_command+0x9a>
		case 'r':
		PORTB |= (1 << PORTB5);
 828:	85 b1       	in	r24, 0x05	; 5
 82a:	80 62       	ori	r24, 0x20	; 32
 82c:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 82e:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 832:	6b e0       	ldi	r22, 0x0B	; 11
 834:	8e e1       	ldi	r24, 0x1E	; 30
 836:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED ROJO OFF",NORMAL);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	87 e1       	ldi	r24, 0x17	; 23
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
		break;
 844:	08 95       	ret
		case 'R':
		PORTB &= ~(1 << PORTB5); // 
 846:	85 b1       	in	r24, 0x05	; 5
 848:	8f 7d       	andi	r24, 0xDF	; 223
 84a:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 84c:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 850:	6b e0       	ldi	r22, 0x0B	; 11
 852:	8e e1       	ldi	r24, 0x1E	; 30
 854:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED ROJO ON",NORMAL);
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	84 e2       	ldi	r24, 0x24	; 36
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
		break;
 862:	08 95       	ret
		case 'g':
		PORTB |= (1 << PORTB4);// Encender LED verde
 864:	85 b1       	in	r24, 0x05	; 5
 866:	80 61       	ori	r24, 0x10	; 16
 868:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 86a:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 86e:	6b e0       	ldi	r22, 0x0B	; 11
 870:	8e e1       	ldi	r24, 0x1E	; 30
 872:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED VERDE OFF",NORMAL);
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	80 e3       	ldi	r24, 0x30	; 48
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
		break;
 880:	08 95       	ret
		case 'G':
		PORTB &= ~(1 << PORTB4); // 
 882:	85 b1       	in	r24, 0x05	; 5
 884:	8f 7e       	andi	r24, 0xEF	; 239
 886:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 888:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 88c:	6b e0       	ldi	r22, 0x0B	; 11
 88e:	8e e1       	ldi	r24, 0x1E	; 30
 890:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED VERDE ON",NORMAL);
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	8e e3       	ldi	r24, 0x3E	; 62
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
		break;
 89e:	08 95       	ret
		case 'b':
		PORTB |= (1 << PORTB3); // Encender LED azul
 8a0:	85 b1       	in	r24, 0x05	; 5
 8a2:	88 60       	ori	r24, 0x08	; 8
 8a4:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 8a6:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 8aa:	6b e0       	ldi	r22, 0x0B	; 11
 8ac:	8e e1       	ldi	r24, 0x1E	; 30
 8ae:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED AZUL OFF",NORMAL);
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	8b e4       	ldi	r24, 0x4B	; 75
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
		break;
 8bc:	08 95       	ret
		case 'B':
		PORTB &= ~(1 << PORTB3); //
 8be:	85 b1       	in	r24, 0x05	; 5
 8c0:	87 7f       	andi	r24, 0xF7	; 247
 8c2:	85 b9       	out	0x05, r24	; 5
		SSD1306_ClearScreen();
 8c4:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
		SSD1306_SetPosition(30,11);
 8c8:	6b e0       	ldi	r22, 0x0B	; 11
 8ca:	8e e1       	ldi	r24, 0x1E	; 30
 8cc:	0e 94 cd 02 	call	0x59a	; 0x59a <SSD1306_SetPosition>
		SSD1306_DrawString("LED AZUL ON",NORMAL);
 8d0:	60 e0       	ldi	r22, 0x00	; 0
 8d2:	88 e5       	ldi	r24, 0x58	; 88
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	0e 94 9a 03 	call	0x734	; 0x734 <SSD1306_DrawString>
 8da:	08 95       	ret

000008dc <__vector_18>:
#include "ssd1306.h"

//global variables
volatile char usart_received_char;
void process_command(char command);
ISR (USART_RX_vect){
 8dc:	1f 92       	push	r1
 8de:	0f 92       	push	r0
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	0f 92       	push	r0
 8e4:	11 24       	eor	r1, r1
 8e6:	2f 93       	push	r18
 8e8:	3f 93       	push	r19
 8ea:	4f 93       	push	r20
 8ec:	5f 93       	push	r21
 8ee:	6f 93       	push	r22
 8f0:	7f 93       	push	r23
 8f2:	8f 93       	push	r24
 8f4:	9f 93       	push	r25
 8f6:	af 93       	push	r26
 8f8:	bf 93       	push	r27
 8fa:	ef 93       	push	r30
 8fc:	ff 93       	push	r31
	SSD1306_ClearScreen();
 8fe:	0e 94 6f 02 	call	0x4de	; 0x4de <SSD1306_ClearScreen>
 usart_received_char=UDR0;
 902:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 906:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <usart_received_char>
 process_command(usart_received_char);
 90a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <usart_received_char>
 90e:	0e 94 03 04 	call	0x806	; 0x806 <process_command>
 912:	2f ef       	ldi	r18, 0xFF	; 255
 914:	8b e7       	ldi	r24, 0x7B	; 123
 916:	92 e9       	ldi	r25, 0x92	; 146
 918:	21 50       	subi	r18, 0x01	; 1
 91a:	80 40       	sbci	r24, 0x00	; 0
 91c:	90 40       	sbci	r25, 0x00	; 0
 91e:	e1 f7       	brne	.-8      	; 0x918 <__stack+0x19>
 920:	00 c0       	rjmp	.+0      	; 0x922 <__stack+0x23>
 922:	00 00       	nop
	_delay_ms(3000);
 }
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__divsf3>:
 946:	0e 94 b7 04 	call	0x96e	; 0x96e <__divsf3x>
 94a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_round>
 94e:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_pscB>
 952:	58 f0       	brcs	.+22     	; 0x96a <__divsf3+0x24>
 954:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscA>
 958:	40 f0       	brcs	.+16     	; 0x96a <__divsf3+0x24>
 95a:	29 f4       	brne	.+10     	; 0x966 <__divsf3+0x20>
 95c:	5f 3f       	cpi	r21, 0xFF	; 255
 95e:	29 f0       	breq	.+10     	; 0x96a <__divsf3+0x24>
 960:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_inf>
 964:	51 11       	cpse	r21, r1
 966:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 96a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_nan>

0000096e <__divsf3x>:
 96e:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fp_split3>
 972:	68 f3       	brcs	.-38     	; 0x94e <__divsf3+0x8>

00000974 <__divsf3_pse>:
 974:	99 23       	and	r25, r25
 976:	b1 f3       	breq	.-20     	; 0x964 <__divsf3+0x1e>
 978:	55 23       	and	r21, r21
 97a:	91 f3       	breq	.-28     	; 0x960 <__divsf3+0x1a>
 97c:	95 1b       	sub	r25, r21
 97e:	55 0b       	sbc	r21, r21
 980:	bb 27       	eor	r27, r27
 982:	aa 27       	eor	r26, r26
 984:	62 17       	cp	r22, r18
 986:	73 07       	cpc	r23, r19
 988:	84 07       	cpc	r24, r20
 98a:	38 f0       	brcs	.+14     	; 0x99a <__divsf3_pse+0x26>
 98c:	9f 5f       	subi	r25, 0xFF	; 255
 98e:	5f 4f       	sbci	r21, 0xFF	; 255
 990:	22 0f       	add	r18, r18
 992:	33 1f       	adc	r19, r19
 994:	44 1f       	adc	r20, r20
 996:	aa 1f       	adc	r26, r26
 998:	a9 f3       	breq	.-22     	; 0x984 <__divsf3_pse+0x10>
 99a:	35 d0       	rcall	.+106    	; 0xa06 <__divsf3_pse+0x92>
 99c:	0e 2e       	mov	r0, r30
 99e:	3a f0       	brmi	.+14     	; 0x9ae <__divsf3_pse+0x3a>
 9a0:	e0 e8       	ldi	r30, 0x80	; 128
 9a2:	32 d0       	rcall	.+100    	; 0xa08 <__divsf3_pse+0x94>
 9a4:	91 50       	subi	r25, 0x01	; 1
 9a6:	50 40       	sbci	r21, 0x00	; 0
 9a8:	e6 95       	lsr	r30
 9aa:	00 1c       	adc	r0, r0
 9ac:	ca f7       	brpl	.-14     	; 0x9a0 <__divsf3_pse+0x2c>
 9ae:	2b d0       	rcall	.+86     	; 0xa06 <__divsf3_pse+0x92>
 9b0:	fe 2f       	mov	r31, r30
 9b2:	29 d0       	rcall	.+82     	; 0xa06 <__divsf3_pse+0x92>
 9b4:	66 0f       	add	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	bb 1f       	adc	r27, r27
 9bc:	26 17       	cp	r18, r22
 9be:	37 07       	cpc	r19, r23
 9c0:	48 07       	cpc	r20, r24
 9c2:	ab 07       	cpc	r26, r27
 9c4:	b0 e8       	ldi	r27, 0x80	; 128
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__divsf3_pse+0x56>
 9c8:	bb 0b       	sbc	r27, r27
 9ca:	80 2d       	mov	r24, r0
 9cc:	bf 01       	movw	r22, r30
 9ce:	ff 27       	eor	r31, r31
 9d0:	93 58       	subi	r25, 0x83	; 131
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	3a f0       	brmi	.+14     	; 0x9e4 <__divsf3_pse+0x70>
 9d6:	9e 3f       	cpi	r25, 0xFE	; 254
 9d8:	51 05       	cpc	r21, r1
 9da:	78 f0       	brcs	.+30     	; 0x9fa <__divsf3_pse+0x86>
 9dc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_inf>
 9e0:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	e4 f3       	brlt	.-8      	; 0x9e0 <__divsf3_pse+0x6c>
 9e8:	98 3e       	cpi	r25, 0xE8	; 232
 9ea:	d4 f3       	brlt	.-12     	; 0x9e0 <__divsf3_pse+0x6c>
 9ec:	86 95       	lsr	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b7 95       	ror	r27
 9f4:	f7 95       	ror	r31
 9f6:	9f 5f       	subi	r25, 0xFF	; 255
 9f8:	c9 f7       	brne	.-14     	; 0x9ec <__divsf3_pse+0x78>
 9fa:	88 0f       	add	r24, r24
 9fc:	91 1d       	adc	r25, r1
 9fe:	96 95       	lsr	r25
 a00:	87 95       	ror	r24
 a02:	97 f9       	bld	r25, 7
 a04:	08 95       	ret
 a06:	e1 e0       	ldi	r30, 0x01	; 1
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	bb 1f       	adc	r27, r27
 a10:	62 17       	cp	r22, r18
 a12:	73 07       	cpc	r23, r19
 a14:	84 07       	cpc	r24, r20
 a16:	ba 07       	cpc	r27, r26
 a18:	20 f0       	brcs	.+8      	; 0xa22 <__divsf3_pse+0xae>
 a1a:	62 1b       	sub	r22, r18
 a1c:	73 0b       	sbc	r23, r19
 a1e:	84 0b       	sbc	r24, r20
 a20:	ba 0b       	sbc	r27, r26
 a22:	ee 1f       	adc	r30, r30
 a24:	88 f7       	brcc	.-30     	; 0xa08 <__divsf3_pse+0x94>
 a26:	e0 95       	com	r30
 a28:	08 95       	ret

00000a2a <__fixsfsi>:
 a2a:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fixunssfsi>
 a2e:	68 94       	set
 a30:	b1 11       	cpse	r27, r1
 a32:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 a36:	08 95       	ret

00000a38 <__fixunssfsi>:
 a38:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_splitA>
 a3c:	88 f0       	brcs	.+34     	; 0xa60 <__fixunssfsi+0x28>
 a3e:	9f 57       	subi	r25, 0x7F	; 127
 a40:	98 f0       	brcs	.+38     	; 0xa68 <__fixunssfsi+0x30>
 a42:	b9 2f       	mov	r27, r25
 a44:	99 27       	eor	r25, r25
 a46:	b7 51       	subi	r27, 0x17	; 23
 a48:	b0 f0       	brcs	.+44     	; 0xa76 <__fixunssfsi+0x3e>
 a4a:	e1 f0       	breq	.+56     	; 0xa84 <__fixunssfsi+0x4c>
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	1a f0       	brmi	.+6      	; 0xa5c <__fixunssfsi+0x24>
 a56:	ba 95       	dec	r27
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__fixunssfsi+0x14>
 a5a:	14 c0       	rjmp	.+40     	; 0xa84 <__fixunssfsi+0x4c>
 a5c:	b1 30       	cpi	r27, 0x01	; 1
 a5e:	91 f0       	breq	.+36     	; 0xa84 <__fixunssfsi+0x4c>
 a60:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_zero>
 a64:	b1 e0       	ldi	r27, 0x01	; 1
 a66:	08 95       	ret
 a68:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__fp_zero>
 a6c:	67 2f       	mov	r22, r23
 a6e:	78 2f       	mov	r23, r24
 a70:	88 27       	eor	r24, r24
 a72:	b8 5f       	subi	r27, 0xF8	; 248
 a74:	39 f0       	breq	.+14     	; 0xa84 <__fixunssfsi+0x4c>
 a76:	b9 3f       	cpi	r27, 0xF9	; 249
 a78:	cc f3       	brlt	.-14     	; 0xa6c <__fixunssfsi+0x34>
 a7a:	86 95       	lsr	r24
 a7c:	77 95       	ror	r23
 a7e:	67 95       	ror	r22
 a80:	b3 95       	inc	r27
 a82:	d9 f7       	brne	.-10     	; 0xa7a <__fixunssfsi+0x42>
 a84:	3e f4       	brtc	.+14     	; 0xa94 <__fixunssfsi+0x5c>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	08 95       	ret

00000a96 <__floatunsisf>:
 a96:	e8 94       	clt
 a98:	09 c0       	rjmp	.+18     	; 0xaac <__floatsisf+0x12>

00000a9a <__floatsisf>:
 a9a:	97 fb       	bst	r25, 7
 a9c:	3e f4       	brtc	.+14     	; 0xaac <__floatsisf+0x12>
 a9e:	90 95       	com	r25
 aa0:	80 95       	com	r24
 aa2:	70 95       	com	r23
 aa4:	61 95       	neg	r22
 aa6:	7f 4f       	sbci	r23, 0xFF	; 255
 aa8:	8f 4f       	sbci	r24, 0xFF	; 255
 aaa:	9f 4f       	sbci	r25, 0xFF	; 255
 aac:	99 23       	and	r25, r25
 aae:	a9 f0       	breq	.+42     	; 0xada <__floatsisf+0x40>
 ab0:	f9 2f       	mov	r31, r25
 ab2:	96 e9       	ldi	r25, 0x96	; 150
 ab4:	bb 27       	eor	r27, r27
 ab6:	93 95       	inc	r25
 ab8:	f6 95       	lsr	r31
 aba:	87 95       	ror	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f1 11       	cpse	r31, r1
 ac4:	f8 cf       	rjmp	.-16     	; 0xab6 <__floatsisf+0x1c>
 ac6:	fa f4       	brpl	.+62     	; 0xb06 <__floatsisf+0x6c>
 ac8:	bb 0f       	add	r27, r27
 aca:	11 f4       	brne	.+4      	; 0xad0 <__floatsisf+0x36>
 acc:	60 ff       	sbrs	r22, 0
 ace:	1b c0       	rjmp	.+54     	; 0xb06 <__floatsisf+0x6c>
 ad0:	6f 5f       	subi	r22, 0xFF	; 255
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	16 c0       	rjmp	.+44     	; 0xb06 <__floatsisf+0x6c>
 ada:	88 23       	and	r24, r24
 adc:	11 f0       	breq	.+4      	; 0xae2 <__floatsisf+0x48>
 ade:	96 e9       	ldi	r25, 0x96	; 150
 ae0:	11 c0       	rjmp	.+34     	; 0xb04 <__floatsisf+0x6a>
 ae2:	77 23       	and	r23, r23
 ae4:	21 f0       	breq	.+8      	; 0xaee <__floatsisf+0x54>
 ae6:	9e e8       	ldi	r25, 0x8E	; 142
 ae8:	87 2f       	mov	r24, r23
 aea:	76 2f       	mov	r23, r22
 aec:	05 c0       	rjmp	.+10     	; 0xaf8 <__floatsisf+0x5e>
 aee:	66 23       	and	r22, r22
 af0:	71 f0       	breq	.+28     	; 0xb0e <__floatsisf+0x74>
 af2:	96 e8       	ldi	r25, 0x86	; 134
 af4:	86 2f       	mov	r24, r22
 af6:	70 e0       	ldi	r23, 0x00	; 0
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	2a f0       	brmi	.+10     	; 0xb06 <__floatsisf+0x6c>
 afc:	9a 95       	dec	r25
 afe:	66 0f       	add	r22, r22
 b00:	77 1f       	adc	r23, r23
 b02:	88 1f       	adc	r24, r24
 b04:	da f7       	brpl	.-10     	; 0xafc <__floatsisf+0x62>
 b06:	88 0f       	add	r24, r24
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__fp_inf>:
 b10:	97 f9       	bld	r25, 7
 b12:	9f 67       	ori	r25, 0x7F	; 127
 b14:	80 e8       	ldi	r24, 0x80	; 128
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	08 95       	ret

00000b1c <__fp_nan>:
 b1c:	9f ef       	ldi	r25, 0xFF	; 255
 b1e:	80 ec       	ldi	r24, 0xC0	; 192
 b20:	08 95       	ret

00000b22 <__fp_pscA>:
 b22:	00 24       	eor	r0, r0
 b24:	0a 94       	dec	r0
 b26:	16 16       	cp	r1, r22
 b28:	17 06       	cpc	r1, r23
 b2a:	18 06       	cpc	r1, r24
 b2c:	09 06       	cpc	r0, r25
 b2e:	08 95       	ret

00000b30 <__fp_pscB>:
 b30:	00 24       	eor	r0, r0
 b32:	0a 94       	dec	r0
 b34:	12 16       	cp	r1, r18
 b36:	13 06       	cpc	r1, r19
 b38:	14 06       	cpc	r1, r20
 b3a:	05 06       	cpc	r0, r21
 b3c:	08 95       	ret

00000b3e <__fp_round>:
 b3e:	09 2e       	mov	r0, r25
 b40:	03 94       	inc	r0
 b42:	00 0c       	add	r0, r0
 b44:	11 f4       	brne	.+4      	; 0xb4a <__fp_round+0xc>
 b46:	88 23       	and	r24, r24
 b48:	52 f0       	brmi	.+20     	; 0xb5e <__fp_round+0x20>
 b4a:	bb 0f       	add	r27, r27
 b4c:	40 f4       	brcc	.+16     	; 0xb5e <__fp_round+0x20>
 b4e:	bf 2b       	or	r27, r31
 b50:	11 f4       	brne	.+4      	; 0xb56 <__fp_round+0x18>
 b52:	60 ff       	sbrs	r22, 0
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <__fp_round+0x20>
 b56:	6f 5f       	subi	r22, 0xFF	; 255
 b58:	7f 4f       	sbci	r23, 0xFF	; 255
 b5a:	8f 4f       	sbci	r24, 0xFF	; 255
 b5c:	9f 4f       	sbci	r25, 0xFF	; 255
 b5e:	08 95       	ret

00000b60 <__fp_split3>:
 b60:	57 fd       	sbrc	r21, 7
 b62:	90 58       	subi	r25, 0x80	; 128
 b64:	44 0f       	add	r20, r20
 b66:	55 1f       	adc	r21, r21
 b68:	59 f0       	breq	.+22     	; 0xb80 <__fp_splitA+0x10>
 b6a:	5f 3f       	cpi	r21, 0xFF	; 255
 b6c:	71 f0       	breq	.+28     	; 0xb8a <__fp_splitA+0x1a>
 b6e:	47 95       	ror	r20

00000b70 <__fp_splitA>:
 b70:	88 0f       	add	r24, r24
 b72:	97 fb       	bst	r25, 7
 b74:	99 1f       	adc	r25, r25
 b76:	61 f0       	breq	.+24     	; 0xb90 <__fp_splitA+0x20>
 b78:	9f 3f       	cpi	r25, 0xFF	; 255
 b7a:	79 f0       	breq	.+30     	; 0xb9a <__fp_splitA+0x2a>
 b7c:	87 95       	ror	r24
 b7e:	08 95       	ret
 b80:	12 16       	cp	r1, r18
 b82:	13 06       	cpc	r1, r19
 b84:	14 06       	cpc	r1, r20
 b86:	55 1f       	adc	r21, r21
 b88:	f2 cf       	rjmp	.-28     	; 0xb6e <__fp_split3+0xe>
 b8a:	46 95       	lsr	r20
 b8c:	f1 df       	rcall	.-30     	; 0xb70 <__fp_splitA>
 b8e:	08 c0       	rjmp	.+16     	; 0xba0 <__fp_splitA+0x30>
 b90:	16 16       	cp	r1, r22
 b92:	17 06       	cpc	r1, r23
 b94:	18 06       	cpc	r1, r24
 b96:	99 1f       	adc	r25, r25
 b98:	f1 cf       	rjmp	.-30     	; 0xb7c <__fp_splitA+0xc>
 b9a:	86 95       	lsr	r24
 b9c:	71 05       	cpc	r23, r1
 b9e:	61 05       	cpc	r22, r1
 ba0:	08 94       	sec
 ba2:	08 95       	ret

00000ba4 <__fp_zero>:
 ba4:	e8 94       	clt

00000ba6 <__fp_szero>:
 ba6:	bb 27       	eor	r27, r27
 ba8:	66 27       	eor	r22, r22
 baa:	77 27       	eor	r23, r23
 bac:	cb 01       	movw	r24, r22
 bae:	97 f9       	bld	r25, 7
 bb0:	08 95       	ret

00000bb2 <__mulsf3>:
 bb2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__mulsf3x>
 bb6:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_round>
 bba:	0e 94 91 05 	call	0xb22	; 0xb22 <__fp_pscA>
 bbe:	38 f0       	brcs	.+14     	; 0xbce <__mulsf3+0x1c>
 bc0:	0e 94 98 05 	call	0xb30	; 0xb30 <__fp_pscB>
 bc4:	20 f0       	brcs	.+8      	; 0xbce <__mulsf3+0x1c>
 bc6:	95 23       	and	r25, r21
 bc8:	11 f0       	breq	.+4      	; 0xbce <__mulsf3+0x1c>
 bca:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_inf>
 bce:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_nan>
 bd2:	11 24       	eor	r1, r1
 bd4:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>

00000bd8 <__mulsf3x>:
 bd8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fp_split3>
 bdc:	70 f3       	brcs	.-36     	; 0xbba <__mulsf3+0x8>

00000bde <__mulsf3_pse>:
 bde:	95 9f       	mul	r25, r21
 be0:	c1 f3       	breq	.-16     	; 0xbd2 <__mulsf3+0x20>
 be2:	95 0f       	add	r25, r21
 be4:	50 e0       	ldi	r21, 0x00	; 0
 be6:	55 1f       	adc	r21, r21
 be8:	62 9f       	mul	r22, r18
 bea:	f0 01       	movw	r30, r0
 bec:	72 9f       	mul	r23, r18
 bee:	bb 27       	eor	r27, r27
 bf0:	f0 0d       	add	r31, r0
 bf2:	b1 1d       	adc	r27, r1
 bf4:	63 9f       	mul	r22, r19
 bf6:	aa 27       	eor	r26, r26
 bf8:	f0 0d       	add	r31, r0
 bfa:	b1 1d       	adc	r27, r1
 bfc:	aa 1f       	adc	r26, r26
 bfe:	64 9f       	mul	r22, r20
 c00:	66 27       	eor	r22, r22
 c02:	b0 0d       	add	r27, r0
 c04:	a1 1d       	adc	r26, r1
 c06:	66 1f       	adc	r22, r22
 c08:	82 9f       	mul	r24, r18
 c0a:	22 27       	eor	r18, r18
 c0c:	b0 0d       	add	r27, r0
 c0e:	a1 1d       	adc	r26, r1
 c10:	62 1f       	adc	r22, r18
 c12:	73 9f       	mul	r23, r19
 c14:	b0 0d       	add	r27, r0
 c16:	a1 1d       	adc	r26, r1
 c18:	62 1f       	adc	r22, r18
 c1a:	83 9f       	mul	r24, r19
 c1c:	a0 0d       	add	r26, r0
 c1e:	61 1d       	adc	r22, r1
 c20:	22 1f       	adc	r18, r18
 c22:	74 9f       	mul	r23, r20
 c24:	33 27       	eor	r19, r19
 c26:	a0 0d       	add	r26, r0
 c28:	61 1d       	adc	r22, r1
 c2a:	23 1f       	adc	r18, r19
 c2c:	84 9f       	mul	r24, r20
 c2e:	60 0d       	add	r22, r0
 c30:	21 1d       	adc	r18, r1
 c32:	82 2f       	mov	r24, r18
 c34:	76 2f       	mov	r23, r22
 c36:	6a 2f       	mov	r22, r26
 c38:	11 24       	eor	r1, r1
 c3a:	9f 57       	subi	r25, 0x7F	; 127
 c3c:	50 40       	sbci	r21, 0x00	; 0
 c3e:	9a f0       	brmi	.+38     	; 0xc66 <__mulsf3_pse+0x88>
 c40:	f1 f0       	breq	.+60     	; 0xc7e <__mulsf3_pse+0xa0>
 c42:	88 23       	and	r24, r24
 c44:	4a f0       	brmi	.+18     	; 0xc58 <__mulsf3_pse+0x7a>
 c46:	ee 0f       	add	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	bb 1f       	adc	r27, r27
 c4c:	66 1f       	adc	r22, r22
 c4e:	77 1f       	adc	r23, r23
 c50:	88 1f       	adc	r24, r24
 c52:	91 50       	subi	r25, 0x01	; 1
 c54:	50 40       	sbci	r21, 0x00	; 0
 c56:	a9 f7       	brne	.-22     	; 0xc42 <__mulsf3_pse+0x64>
 c58:	9e 3f       	cpi	r25, 0xFE	; 254
 c5a:	51 05       	cpc	r21, r1
 c5c:	80 f0       	brcs	.+32     	; 0xc7e <__mulsf3_pse+0xa0>
 c5e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_inf>
 c62:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_szero>
 c66:	5f 3f       	cpi	r21, 0xFF	; 255
 c68:	e4 f3       	brlt	.-8      	; 0xc62 <__mulsf3_pse+0x84>
 c6a:	98 3e       	cpi	r25, 0xE8	; 232
 c6c:	d4 f3       	brlt	.-12     	; 0xc62 <__mulsf3_pse+0x84>
 c6e:	86 95       	lsr	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b7 95       	ror	r27
 c76:	f7 95       	ror	r31
 c78:	e7 95       	ror	r30
 c7a:	9f 5f       	subi	r25, 0xFF	; 255
 c7c:	c1 f7       	brne	.-16     	; 0xc6e <__mulsf3_pse+0x90>
 c7e:	fe 2b       	or	r31, r30
 c80:	88 0f       	add	r24, r24
 c82:	91 1d       	adc	r25, r1
 c84:	96 95       	lsr	r25
 c86:	87 95       	ror	r24
 c88:	97 f9       	bld	r25, 7
 c8a:	08 95       	ret

00000c8c <__itoa_ncheck>:
 c8c:	bb 27       	eor	r27, r27
 c8e:	4a 30       	cpi	r20, 0x0A	; 10
 c90:	31 f4       	brne	.+12     	; 0xc9e <__itoa_ncheck+0x12>
 c92:	99 23       	and	r25, r25
 c94:	22 f4       	brpl	.+8      	; 0xc9e <__itoa_ncheck+0x12>
 c96:	bd e2       	ldi	r27, 0x2D	; 45
 c98:	90 95       	com	r25
 c9a:	81 95       	neg	r24
 c9c:	9f 4f       	sbci	r25, 0xFF	; 255
 c9e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__utoa_common>

00000ca2 <__utoa_ncheck>:
 ca2:	bb 27       	eor	r27, r27

00000ca4 <__utoa_common>:
 ca4:	fb 01       	movw	r30, r22
 ca6:	55 27       	eor	r21, r21
 ca8:	aa 27       	eor	r26, r26
 caa:	88 0f       	add	r24, r24
 cac:	99 1f       	adc	r25, r25
 cae:	aa 1f       	adc	r26, r26
 cb0:	a4 17       	cp	r26, r20
 cb2:	10 f0       	brcs	.+4      	; 0xcb8 <__utoa_common+0x14>
 cb4:	a4 1b       	sub	r26, r20
 cb6:	83 95       	inc	r24
 cb8:	50 51       	subi	r21, 0x10	; 16
 cba:	b9 f7       	brne	.-18     	; 0xcaa <__utoa_common+0x6>
 cbc:	a0 5d       	subi	r26, 0xD0	; 208
 cbe:	aa 33       	cpi	r26, 0x3A	; 58
 cc0:	08 f0       	brcs	.+2      	; 0xcc4 <__utoa_common+0x20>
 cc2:	a9 5d       	subi	r26, 0xD9	; 217
 cc4:	a1 93       	st	Z+, r26
 cc6:	00 97       	sbiw	r24, 0x00	; 0
 cc8:	79 f7       	brne	.-34     	; 0xca8 <__utoa_common+0x4>
 cca:	b1 11       	cpse	r27, r1
 ccc:	b1 93       	st	Z+, r27
 cce:	11 92       	st	Z+, r1
 cd0:	cb 01       	movw	r24, r22
 cd2:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <strrev>

00000cd6 <strrev>:
 cd6:	dc 01       	movw	r26, r24
 cd8:	fc 01       	movw	r30, r24
 cda:	67 2f       	mov	r22, r23
 cdc:	71 91       	ld	r23, Z+
 cde:	77 23       	and	r23, r23
 ce0:	e1 f7       	brne	.-8      	; 0xcda <strrev+0x4>
 ce2:	32 97       	sbiw	r30, 0x02	; 2
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <strrev+0x18>
 ce6:	7c 91       	ld	r23, X
 ce8:	6d 93       	st	X+, r22
 cea:	70 83       	st	Z, r23
 cec:	62 91       	ld	r22, -Z
 cee:	ae 17       	cp	r26, r30
 cf0:	bf 07       	cpc	r27, r31
 cf2:	c8 f3       	brcs	.-14     	; 0xce6 <strrev+0x10>
 cf4:	08 95       	ret

00000cf6 <_exit>:
 cf6:	f8 94       	cli

00000cf8 <__stop_program>:
 cf8:	ff cf       	rjmp	.-2      	; 0xcf8 <__stop_program>
